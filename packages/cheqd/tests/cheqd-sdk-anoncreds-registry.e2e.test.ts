import type { CheqdDidCreateOptions } from '../src'

import { Agent, JsonTransformer, TypedArrayEncoder } from '@credo-ts/core'

import { getInMemoryAgentOptions } from '../../core/tests/helpers'
import { CheqdAnonCredsRegistry } from '../src/anoncreds'

import { cheqdPayerSeeds, getCheqdModules } from './setupCheqdModule'

const agent = new Agent(getInMemoryAgentOptions('cheqdAnonCredsRegistry', {}, getCheqdModules(cheqdPayerSeeds[2])))

const cheqdAnonCredsRegistry = new CheqdAnonCredsRegistry()

let issuerId: string

describe('cheqdAnonCredsRegistry', () => {
  beforeAll(async () => {
    await agent.initialize()
  })

  afterAll(async () => {
    await agent.shutdown()
    await agent.wallet.delete()
  })

  let credentialDefinitionId: string

  // One test as the credential definition depends on the schema
  test('register and resolve a schema and credential definition', async () => {
    const privateKey = TypedArrayEncoder.fromString('000000000000000000000000000cheqd')

    const did = await agent.dids.create<CheqdDidCreateOptions>({
      method: 'cheqd',
      secret: {
        verificationMethod: {
          id: 'key-10',
          type: 'Ed25519VerificationKey2020',
          privateKey,
        },
      },
      options: {
        network: 'testnet',
        methodSpecificIdAlgo: 'uuid',
      },
    })
    expect(did.didState).toMatchObject({ state: 'finished' })
    issuerId = did.didState.did as string

    const dynamicVersion = `1.${Math.random() * 100}`

    const schemaResult = await cheqdAnonCredsRegistry.registerSchema(agent.context, {
      schema: {
        attrNames: ['name'],
        issuerId,
        name: 'test11',
        version: dynamicVersion,
      },
      options: {},
    })

    expect(JsonTransformer.toJSON(schemaResult)).toMatchObject({
      schemaState: {
        state: 'finished',
        schema: {
          attrNames: ['name'],
          issuerId,
          name: 'test11',
          version: dynamicVersion,
        },
        schemaId: `${schemaResult.schemaState.schemaId}`,
      },
      registrationMetadata: {},
      schemaMetadata: {},
    })

    const schemaResponse = await cheqdAnonCredsRegistry.getSchema(agent.context, `${schemaResult.schemaState.schemaId}`)
    expect(schemaResponse).toMatchObject({
      schema: {
        attrNames: ['name'],
        name: 'test11',
        version: dynamicVersion,
        issuerId,
      },
      schemaId: `${schemaResult.schemaState.schemaId}`,
      resolutionMetadata: {},
      schemaMetadata: {},
    })

    const credentialDefinitionResult = await cheqdAnonCredsRegistry.registerCredentialDefinition(agent.context, {
      credentialDefinition: {
        issuerId,
        tag: 'TAG',
        schemaId: `${schemaResult.schemaState.schemaId}`,
        type: 'CL',
        value: {
          primary: {
            n: '92511867718854414868106363741369833735017762038454769060600859608405811709675033445666654908195955460485998711087020152978597220168927505650092431295783175164390266561239892662085428655566792056852960599485298025843840058914610127716620252006466964070280255168745873592143068949458568751438337748294055976926080232538440619420568859737673474560851456027625679328271511966332808025880807996449998057729417608399774744254122385012832309402226532031122728445959276178939234308090390331654445053482963947804769291501664200141562885660084823885847247231002821472258218384342423605116504024514572826071246440130942849549441',
            s: '80388543865249952799447792504739237616187770512259677275061283897050980768551818104137338144380636412773836688624071360386172349725818126495487584981520630638409717065318132420766896092370913800616033623618952639023946750307405126873476182540669638841562357523429245685476919178722373320218824590869735129801004394337640642997250464303104754942997839179333543643110326022824394934965538190976474473353762308333205671176627192797138375084260446324344637548455228161138089974447059481109651156379803576163576511072261388342837813901850712083922506433336723723235701670225584863772222447543742649328218950436824219992164',
            r: {
              age: '676933340341980399002624386891134393471002096508227567343731826159610079436978196421307099268754545293545727546242372579987825752872485684085629459107300175443328323289748793060894500514926703654606851666031895448970879827423190730510730624784665299646624113512701254199984520803796529034094958026048762178753193812250643294518237843809104055653333871102658177900702978008644780459400512716361564897282969982554031820285585105004870317861287847206222714589633178648982299799311192432563797220854755882933052881306804544233529886513105815543097685128456041780804442879272476590077760678785460726492895806240870944398',
              master_secret:

            },
            rctxt:
              '19574881057684356733946284215946569464410211018678168661028327420122678446653210056362495902735819742274128834330867933095119512313591151219353395069123546495720010325822330866859140765940839241212947354612836044244554152389691282543839111284006009168728161183863936810142428875817934316327118674532328892591410224676539770085459540786747902789677759379901079898127879301595929571621032704093287675668250862222728331030586585586110859977896767318814398026750215625180255041545607499673023585546720788973882263863911222208020438685873501025545464213035270207099419236974668665979962146355749687924650853489277747454993',
            z: '18569464356833363098514177097771727133940629758890641648661259687745137028161881113251218061243607037717553708179509640909238773964066423807945164288256211132195919975343578956381001087353353060599758005375631247614777454313440511375923345538396573548499287265163879524050255226779884271432737062283353279122281220812931572456820130441114446870167673796490210349453498315913599982158253821945225264065364670730546176140788405935081171854642125236557475395879246419105888077042924382595999612137336915304205628167917473420377397118829734604949103124514367857266518654728464539418834291071874052392799652266418817991437',
          },
        },
      },
      options: {},
    })

    expect(credentialDefinitionResult).toMatchObject({
      credentialDefinitionState: {
        credentialDefinition: {
          issuerId,
          tag: 'TAG',
          schemaId: `${schemaResult.schemaState.schemaId}`,
          type: 'CL',
          value: {
            primary: {
              n: '92511867718854414868106363741369833735017762038454769060600859608405811709675033445666654908195955460485998711087020152978597220168927505650092431295783175164390266561239892662085428655566792056852960599485298025843840058914610127716620252006466964070280255168745873592143068949458568751438337748294055976926080232538440619420568859737673474560851456027625679328271511966332808025880807996449998057729417608399774744254122385012832309402226532031122728445959276178939234308090390331654445053482963947804769291501664200141562885660084823885847247231002821472258218384342423605116504024514572826071246440130942849549441',
              s: '80388543865249952799447792504739237616187770512259677275061283897050980768551818104137338144380636412773836688624071360386172349725818126495487584981520630638409717065318132420766896092370913800616033623618952639023946750307405126873476182540669638841562357523429245685476919178722373320218824590869735129801004394337640642997250464303104754942997839179333543643110326022824394934965538190976474473353762308333205671176627192797138375084260446324344637548455228161138089974447059481109651156379803576163576511072261388342837813901850712083922506433336723723235701670225584863772222447543742649328218950436824219992164',
              r: {
                age: '676933340341980399002624386891134393471002096508227567343731826159610079436978196421307099268754545293545727546242372579987825752872485684085629459107300175443328323289748793060894500514926703654606851666031895448970879827423190730510730624784665299646624113512701254199984520803796529034094958026048762178753193812250643294518237843809104055653333871102658177900702978008644780459400512716361564897282969982554031820285585105004870317861287847206222714589633178648982299799311192432563797220854755882933052881306804544233529886513105815543097685128456041780804442879272476590077760678785460726492895806240870944398',
                master_secret:
                  '57770757113548032970308439965749734133430520933173186296299026579579930337912607419798836831937319372744879560676750427054135869214212225572618340088847222727882935159356459822445182287686057012197046378986248048722180093079919306125315662058290895629438767985427829790980355162853804522854494960613869765167538645624719923127052541372069255024631093663068055100579264049925388231368871107383977060590248865498902704546409806115171120555709438784189721957301548212242748685629860268468247494986146122636455769804467583612610341632602695197189514316033637331733820369170763954604394734655429769801516997967996980978751',
              },
              rctxt:
                '19574881057684356733946284215946569464410211018678168661028327420122678446653210056362495902735819742274128834330867933095119512313591151219353395069123546495720010325822330866859140765940839241212947354612836044244554152389691282543839111284006009168728161183863936810142428875817934316327118674532328892591410224676539770085459540786747902789677759379901079898127879301595929571621032704093287675668250862222728331030586585586110859977896767318814398026750215625180255041545607499673023585546720788973882263863911222208020438685873501025545464213035270207099419236974668665979962146355749687924650853489277747454993',
              z: '18569464356833363098514177097771727133940629758890641648661259687745137028161881113251218061243607037717553708179509640909238773964066423807945164288256211132195919975343578956381001087353353060599758005375631247614777454313440511375923345538396573548499287265163879524050255226779884271432737062283353279122281220812931572456820130441114446870167673796490210349453498315913599982158253821945225264065364670730546176140788405935081171854642125236557475395879246419105888077042924382595999612137336915304205628167917473420377397118829734604949103124514367857266518654728464539418834291071874052392799652266418817991437',
            },
          },
        },
        credentialDefinitionId: `${credentialDefinitionResult.credentialDefinitionState.credentialDefinitionId}`,
        state: 'finished',
      },
    })

    credentialDefinitionId = credentialDefinitionResult.credentialDefinitionState.credentialDefinitionId as string

    const credentialDefinitionResponse = await cheqdAnonCredsRegistry.getCredentialDefinition(
      agent.context,
      credentialDefinitionResult.credentialDefinitionState.credentialDefinitionId as string
    )

    expect(credentialDefinitionResponse).toMatchObject({
      credentialDefinitionId: `${credentialDefinitionResult.credentialDefinitionState.credentialDefinitionId}`,
      credentialDefinition: {
        issuerId,
        schemaId: `${schemaResult.schemaState.schemaId}`,
        tag: 'TAG',
        type: 'CL',
        value: {
          primary: {
            n: '92511867718854414868106363741369833735017762038454769060600859608405811709675033445666654908195955460485998711087020152978597220168927505650092431295783175164390266561239892662085428655566792056852960599485298025843840058914610127716620252006466964070280255168745873592143068949458568751438337748294055976926080232538440619420568859737673474560851456027625679328271511966332808025880807996449998057729417608399774744254122385012832309402226532031122728445959276178939234308090390331654445053482963947804769291501664200141562885660084823885847247231002821472258218384342423605116504024514572826071246440130942849549441',
            r: {
              age: '676933340341980399002624386891134393471002096508227567343731826159610079436978196421307099268754545293545727546242372579987825752872485684085629459107300175443328323289748793060894500514926703654606851666031895448970879827423190730510730624784665299646624113512701254199984520803796529034094958026048762178753193812250643294518237843809104055653333871102658177900702978008644780459400512716361564897282969982554031820285585105004870317861287847206222714589633178648982299799311192432563797220854755882933052881306804544233529886513105815543097685128456041780804442879272476590077760678785460726492895806240870944398',
              master_secret:

            },
            rctxt:
              '19574881057684356733946284215946569464410211018678168661028327420122678446653210056362495902735819742274128834330867933095119512313591151219353395069123546495720010325822330866859140765940839241212947354612836044244554152389691282543839111284006009168728161183863936810142428875817934316327118674532328892591410224676539770085459540786747902789677759379901079898127879301595929571621032704093287675668250862222728331030586585586110859977896767318814398026750215625180255041545607499673023585546720788973882263863911222208020438685873501025545464213035270207099419236974668665979962146355749687924650853489277747454993',
            s: '80388543865249952799447792504739237616187770512259677275061283897050980768551818104137338144380636412773836688624071360386172349725818126495487584981520630638409717065318132420766896092370913800616033623618952639023946750307405126873476182540669638841562357523429245685476919178722373320218824590869735129801004394337640642997250464303104754942997839179333543643110326022824394934965538190976474473353762308333205671176627192797138375084260446324344637548455228161138089974447059481109651156379803576163576511072261388342837813901850712083922506433336723723235701670225584863772222447543742649328218950436824219992164',
            z: '18569464356833363098514177097771727133940629758890641648661259687745137028161881113251218061243607037717553708179509640909238773964066423807945164288256211132195919975343578956381001087353353060599758005375631247614777454313440511375923345538396573548499287265163879524050255226779884271432737062283353279122281220812931572456820130441114446870167673796490210349453498315913599982158253821945225264065364670730546176140788405935081171854642125236557475395879246419105888077042924382595999612137336915304205628167917473420377397118829734604949103124514367857266518654728464539418834291071874052392799652266418817991437',
          },
        },
      },
    })
  })

  // Should not resolve invalid schema
  test('false test cases', async () => {
    const invalidSchemaResourceId =
      'did:cheqd:testnet:d8ac0372-0d4b-413e-8ef5-8e8f07822b2c/resources/ffd001c2-1f80-4cd8-84b2-945fba309457'
    const schemaResponse = await cheqdAnonCredsRegistry.getSchema(agent.context, `${invalidSchemaResourceId}`)

    expect(schemaResponse).toMatchObject({
      resolutionMetadata: {
        error: 'notFound',
      },
      schemaMetadata: {},
    })
  })

  // Should resolve query based url
  test('resolve query based url', async () => {
    const schemaResourceId = `${issuerId}?resourceName=test11-Schema&resourceType=anonCredsSchema`

    const schemaResponse = await cheqdAnonCredsRegistry.getSchema(agent.context, schemaResourceId)
    expect(schemaResponse).toMatchObject({
      schema: {
        attrNames: ['name'],
        name: 'test11',
      },
    })
  })

  test('register and resolve revocation registry definition and statusList', async () => {
    const registerRevocationDefinitionResponse = await cheqdAnonCredsRegistry.registerRevocationRegistryDefinition(
      agent.context,
      {
        options: {},
        revocationRegistryDefinition: {
          issuerId,
          credDefId: credentialDefinitionId,
          tag: 'TAG',
          value: {
            publicKeys: {
              accumKey: {
                z: '1 08C6E71D1CE1D1690AED25BC769646538BEC69600829CE1FB7AA788479E0B878 1 026909513F9901655B3F9153071DB43A846418F00F305BA25FE851730ED41102 1 10E9D5438AE95AE2BED78A33716BFF923A0F4CA980A9A599C25A24A2295658DA 1 0A04C318A0DFD29ABB1F1D8DD697999F9B89D6682272C591B586D53F8A9D3DC4 1 0501E5FFCE863E08D209C2FA7B390A5AA91F462BB71957CF8DB41EACDC9EB222 1 14BED208817ACB398D8476212C987E7FF77265A72F145EF2853DDB631758AED4 1 180774B2F67179FB62BD452A15F6C034599DA7BF45CC15AA2138212B53A0C110 1 00A0B87DDFFC047BE07235DD11D31226A9F5FA1E03D49C03843AA36A8AF68194 1 10218703955E0B53DB93A8D2D593EB8120A9C9739F127325CB0865ECA4B2B42F 1 08685A263CD0A045FD845AAC6DAA0FDDAAD0EC222C1A0286799B69F37CD75919 1 1FA3D27E70C185C1A16D9A83D3EE7D8CACE727A99C882EE649F87BD52E9EEE47 1 054704706B95A154F5AFC3FBB536D38DC9DCB9702EA0BFDCCB2E36A3AA23F3EC',
              },
            },
            maxCredNum: 666,
            tailsLocation: 'https://my.revocations.tails/tailsfile.txt',
            tailsHash: '91zvq2cFmBZmHCcLqFyzv7bfehHH5rMhdAG5wTjqy2PE',
          },
          revocDefType: 'CL_ACCUM',
        },
      }
    )

    if (!registerRevocationDefinitionResponse.revocationRegistryDefinitionState.revocationRegistryDefinitionId)
      throw new Error('Revocation registry definition ID not found')

    const revocationRegistryDefinitionId =
      registerRevocationDefinitionResponse.revocationRegistryDefinitionState.revocationRegistryDefinitionId

    const revocationRegistryDefinitionResponse = await cheqdAnonCredsRegistry.getRevocationRegistryDefinition(
      agent.context,
      revocationRegistryDefinitionId
    )

    expect(revocationRegistryDefinitionResponse.revocationRegistryDefinition).toMatchObject({
      revocDefType: 'CL_ACCUM',
      credDefId: credentialDefinitionId,
      tag: 'TAG',
      value: {
        publicKeys: {
          accumKey: {
            z: '1 08C6E71D1CE1D1690AED25BC769646538BEC69600829CE1FB7AA788479E0B878 1 026909513F9901655B3F9153071DB43A846418F00F305BA25FE851730ED41102 1 10E9D5438AE95AE2BED78A33716BFF923A0F4CA980A9A599C25A24A2295658DA 1 0A04C318A0DFD29ABB1F1D8DD697999F9B89D6682272C591B586D53F8A9D3DC4 1 0501E5FFCE863E08D209C2FA7B390A5AA91F462BB71957CF8DB41EACDC9EB222 1 14BED208817ACB398D8476212C987E7FF77265A72F145EF2853DDB631758AED4 1 180774B2F67179FB62BD452A15F6C034599DA7BF45CC15AA2138212B53A0C110 1 00A0B87DDFFC047BE07235DD11D31226A9F5FA1E03D49C03843AA36A8AF68194 1 10218703955E0B53DB93A8D2D593EB8120A9C9739F127325CB0865ECA4B2B42F 1 08685A263CD0A045FD845AAC6DAA0FDDAAD0EC222C1A0286799B69F37CD75919 1 1FA3D27E70C185C1A16D9A83D3EE7D8CACE727A99C882EE649F87BD52E9EEE47 1 054704706B95A154F5AFC3FBB536D38DC9DCB9702EA0BFDCCB2E36A3AA23F3EC',
          },
        },
        maxCredNum: 666,
        tailsLocation: 'https://my.revocations.tails/tailsfile.txt',
        tailsHash: '91zvq2cFmBZmHCcLqFyzv7bfehHH5rMhdAG5wTjqy2PE',
      },
    })

    const registerRevocationStatusListResponse = await cheqdAnonCredsRegistry.registerRevocationStatusList(
      agent.context,
      {
        options: {},
        revocationStatusList: {
          issuerId,
          revRegDefId: revocationRegistryDefinitionId,
          revocationList: [
            0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
          ],
          currentAccumulator:
            '21 124C594B6B20E41B681E92B2C43FD165EA9E68BC3C9D63A82C8893124983CAE94 21 124C5341937827427B0A3A32113BD5E64FB7AB39BD3E5ABDD7970874501CA4897 6 5438CB6F442E2F807812FD9DC0C39AFF4A86B1E6766DBB5359E86A4D70401B0F 4 39D1CA5C4716FFC4FE0853C4FF7F081DFD8DF8D2C2CA79705211680AC77BF3A1 6 70504A5493F89C97C225B68310811A41AD9CD889301F238E93C95AD085E84191 4 39582252194D756D5D86D0EED02BF1B95CE12AED2FA5CD3C53260747D891993C',
        },
      }
    )

    if (!registerRevocationStatusListResponse.revocationStatusListState.revocationStatusList?.timestamp)
      throw new Error('Revocation status list timestamp not found')

    const statusListTimestamp =
      registerRevocationStatusListResponse.revocationStatusListState.revocationStatusList.timestamp

    const revocationStatusListResponse = await cheqdAnonCredsRegistry.getRevocationStatusList(
      agent.context,
      revocationRegistryDefinitionId,
      statusListTimestamp
    )

    expect(revocationStatusListResponse.revocationStatusList).toMatchObject({
      revRegDefId: `${revocationRegistryDefinitionId}`,
      revocationList: [
        0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      ],
      currentAccumulator:
        '21 124C594B6B20E41B681E92B2C43FD165EA9E68BC3C9D63A82C8893124983CAE94 21 124C5341937827427B0A3A32113BD5E64FB7AB39BD3E5ABDD7970874501CA4897 6 5438CB6F442E2F807812FD9DC0C39AFF4A86B1E6766DBB5359E86A4D70401B0F 4 39D1CA5C4716FFC4FE0853C4FF7F081DFD8DF8D2C2CA79705211680AC77BF3A1 6 70504A5493F89C97C225B68310811A41AD9CD889301F238E93C95AD085E84191 4 39582252194D756D5D86D0EED02BF1B95CE12AED2FA5CD3C53260747D891993C',
    })
  })
})
